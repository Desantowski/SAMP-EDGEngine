#include "stdafx.h"
#include <Misc/Clock.hpp>

namespace agdk
{
#ifdef AGDK_TIME_IMPL /* TODO: Remove this */
	// Static values
	const Time Time::Zero = agdk::microseconds(0);

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time::Time()
		: m_microseconds(0)
	{
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time Time::fromMicroseconds(const long long microseconds)
	{
		Time result;
		result.m_microseconds = microseconds;
		return result;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	void Time::operator+=(const Time& Right)
	{
		m_microseconds += Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	void Time::operator-=(const Time& Right)
	{
		m_microseconds -= Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time::Time(double seconds)
		: m_microseconds(static_cast<long long>(seconds * 1000 * 1000 * 1000))
	{
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time operator+(const Time& Left, const Time& Right)
	{
		return Time::fromMicroseconds(Left.microseconds() + Right.microseconds());
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time operator-(const Time& Left, const Time& Right)
	{
		return Time::fromMicroseconds(Left.microseconds() - Right.microseconds());
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator>(const Time& Left, const Time& Right)
	{
		return Left.microseconds() > Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator<(const Time& Left, const Time& Right)
	{
		return Left.microseconds() < Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator==(const Time& Left, const Time& Right)
	{
		return Left.microseconds() == Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator!=(const Time& Left, const Time& Right)
	{
		return Left.microseconds() != Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator>=(const Time& Left, const Time& Right)
	{
		return Left.microseconds() >= Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	bool operator<=(const Time& Left, const Time& Right)
	{
		return Left.microseconds() <= Right.microseconds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time microseconds(long long t)
	{
		return Time::fromMicroseconds(t);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time milliseconds(double t)
	{
		return Time::fromMicroseconds(static_cast<long long>(t * 1000));
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Time seconds(double t)
	{
		return Time::fromMicroseconds(static_cast<long long>(t * 1000 * 1000));
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////
#else
	Clock::Clock()
		: m_startTime(Clock::now())
	{
			
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Clock::duration Clock::restart()
	{
		auto current = this->getElapsedTime();
		m_startTime = Clock::now();
		return current;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Clock::duration Clock::getElapsedTime() const
	{
		return Clock::now() - m_startTime;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	Clock::duration Clock::now()
	{
		return std::chrono::steady_clock::now().time_since_epoch();
	}
#endif
}
